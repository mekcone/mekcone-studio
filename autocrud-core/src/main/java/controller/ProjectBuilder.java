package controller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import controller.generators.backend.*;
import controller.generators.frontend.admin.*;
import model.project.*;

import java.io.*;
import java.nio.file.Files;
import java.util.Date;

public class ProjectBuilder {
    public Project project;
    private String projectUrl;
    private String backendSourceBaseUrl;
    private String frontendSourceBaseUrl;

    public ProjectBuilder(String url) {
        this.projectUrl = url;

        File projectDiretory = new File(url);
        if ((!projectDiretory.exists()) || (!projectDiretory.isDirectory())) {
            Logger.error("Invalid project directory");
        }

        File projectFile = new File(url + "/autocrud-project.json");
        if (!projectFile.exists()) {
            Logger.error("Project file not found");
        }

        // Read project file
        String data = FileManager.read(url + "/autocrud-project.json");
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(Value.class, new TypeAdapter<Value>() {
                    @Override
                    public void write(JsonWriter out, Value value) throws IOException {
                        out.value(value.getData());
                    }
                    @Override
                    public Value read(JsonReader in) throws IOException {
                        try {
                            return Value.String(in.nextString());
                        } catch (NumberFormatException e) {
                            return null;
                        }
                    }
                })
                .create();


        Project project = gson.fromJson(data, Project.class);
        this.project = project;

        for (Table table: this.project.getTables()) {
            for (Column column: table.getColumns()) {
                if (column.isPrimaryKey()) {
                    table.setPrimaryKey(column.getName().getData());
                    break;
                }
            }
        }

        this.backendSourceBaseUrl = url + "/" + project.getArtifactId().getData() + "-backend" +
                "/src/main/java/" + (this.project.getGroupId() +
                '.' + this.project.getArtifactId().getData()).replace('.', '/');

        this.frontendSourceBaseUrl = url + "/" + project.getArtifactId().getData() + "-frontend";
    }


    @Override
    public String toString() {
        return this.project.toString();
    }


    public static String getDescription() {
        Date date = new Date();
        return "Auto-generated by AutoCRUD at " + date;
    }


    public void buildSpringBootProject() {
        FileManager.checkDirectory(backendSourceBaseUrl + "/model");
        FileManager.checkDirectory(backendSourceBaseUrl + "/mapper");
        FileManager.checkDirectory(backendSourceBaseUrl + "/controller");
        FileManager.checkDirectory(backendSourceBaseUrl + "/config");
        FileManager.checkDirectory(backendSourceBaseUrl + "/service/impl");
        FileManager.checkDirectory(projectUrl + "/" + project.getArtifactId().getData() + "-backend" + "/src/main/resources");

        new ModelGenerator(this.project, backendSourceBaseUrl + "/model");
        new MapperGenerator(this.project, backendSourceBaseUrl + "/mapper");
        new SqlQueryGenerator(this.project, this.projectUrl + "/" + project.getArtifactId().getData() + "-backend");
        new ControllerGenerator(this.project, backendSourceBaseUrl + "/controller");
        new PomGenerator(this.project, this.projectUrl + "/" + project.getArtifactId().getData() + "-backend");
        new ApplicationEntryGenerator(this.project, backendSourceBaseUrl);
        new ApplicationPropertiesGenerator(this.project, this.projectUrl + "/" + project.getArtifactId().getData() + "-backend" + "/src/main/resources");
        new ServiceGenerator(this.project, backendSourceBaseUrl + "/service");
        new ServiceImplGenerator(this.project, backendSourceBaseUrl + "/service/impl");
    }

    public void buildVueAdminProject() {
        FileManager.checkDirectory(frontendSourceBaseUrl + "/admin/static");

        // Copy template files
        String[] templateDirectories = {
                "/",
                "/build/",
                "/config/",
                "/src/",
                "/src/components/",
                "/src/router/"
        };

        for (String directory: templateDirectories) {
            File file = new File(System.getProperty("user.dir") + "/templates/vue" + directory);
            File[] files = file.listFiles();
            for (File f: files) {
                if (!f.getName().equals("package.json")) {
                    File outputFile = new File(frontendSourceBaseUrl + "/admin/" + directory + f.getName());
                    try {
                        if (!outputFile.exists()) {
                            Files.copy(f.toPath(), outputFile.toPath());
                        }
                    } catch (IOException e) {
                        Logger.error(e.getMessage());
                    }
                }
            }
        }

        // Generate index.html
        TemplateProccesor templateProccesor = new TemplateProccesor(System.getProperty("user.dir") + "/templates/vue/index.html");
        templateProccesor.insert("title", this.project.getArtifactId().capitalizedCamelStyle() + " Admin");
        FileManager.write(frontendSourceBaseUrl + "/admin/index.html", templateProccesor.toString());

        //new ApiDocumentGenerator(this.project, frontendSourceBaseUrl);
        new PackageJSONGenerator(this.project, frontendSourceBaseUrl + "/admin");
        new RouterJSGennerator(this.project, frontendSourceBaseUrl + "/admin/src/router");
        new AppVueGenrator(this.project, frontendSourceBaseUrl + "/admin/src/App.vue");
        new PanelVueGenerator(this.project, frontendSourceBaseUrl + "/admin/src/components/Panel.vue");
        new DataTablesVueGenerator(this.project, frontendSourceBaseUrl + "/admin/src/components");
    }
}
