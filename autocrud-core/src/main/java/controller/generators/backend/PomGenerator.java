package controller.generators.backend;

import controller.Logger;
import controller.ProjectBuilder;
import model.project.Module;
import model.project.Project;
import org.jdom2.*;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

import javax.xml.xpath.*;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class PomGenerator {
    public PomGenerator(Project project, String path) {
        // Root
        Element rootElement = new Element("project");
        Document document = new Document(rootElement);
        rootElement.addContent(new Comment(ProjectBuilder.getDescription()));
        Namespace xmlns = Namespace.getNamespace("http://maven.apache.org/POM/4.0.0");
        rootElement.setNamespace(xmlns);
        Namespace xsi = Namespace.getNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
        rootElement.addNamespaceDeclaration(xsi);
        rootElement.setAttribute("schemaLocation", "http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd", xsi);
        rootElement.addContent(new Element("modelVersion", xmlns).setText("4.0.0"));

        // Parent
        Element parentElement = new Element("parent", xmlns);
        rootElement.addContent(parentElement);
        parentElement.addContent(new Element("groupId", xmlns).setText("org.springframework.boot"));
        parentElement.addContent(new Element("artifactId", xmlns).setText("spring-boot-starter-parent"));
        parentElement.addContent(new Element("version", xmlns).setText("2.2.1.RELEASE"));
        parentElement.addContent(new Element("relativePath", xmlns));

        rootElement.addContent(new Element("groupId", xmlns).setText(project.getGroupId()));
        rootElement.addContent(new Element("artifactId", xmlns).setText(project.getArtifactId().getData()));
        rootElement.addContent(new Element("version", xmlns).setText(project.getVersion()));
        rootElement.addContent(new Element("name", xmlns).setText(project.getArtifactId().getData()));
        rootElement.addContent(new Element("description", xmlns).setText(
                project.getArtifactId().capitalizedCamelStyle() +
                        " Project auto-generated by AutoCRUD"
        ));

        // Properties
        Element propertiesElement = new Element("properties", xmlns);
        rootElement.addContent(propertiesElement);
        propertiesElement.addContent(new Element("java.version", xmlns).setText("1.8"));

        // Dependencies
        Element dependenciesElement = new Element("dependencies", xmlns);
        rootElement.addContent(dependenciesElement);

        project.addModule(new Module("web"));
        project.addModule(new Module("mybatis"));

        for (Module module: project.getModules()) {
            String groupId, artifactId, version = null, scope = null;
            switch (module.getId()) {
                case "mybatis":
                    groupId = "org.mybatis.spring.boot";
                    artifactId = "mybatis-spring-boot-starter";
                    version = "2.1.1";
                    break;
                case "mysql":
                    groupId = "mysql";
                    artifactId = "mysql-connector-java";
                    scope = "runtime";
                    break;
                case "redis":
                    groupId = "org.springframework.boot";
                    artifactId = "spring-boot-starter-data-redis";
                    break;
                case "web":
                    groupId = "org.springframework.boot";
                    artifactId = "spring-boot-starter-web";
                    break;
                default:
                    Logger.warn("Unknown module \"" + module.getId() + "\".");
                    continue;
            }
            Element dependencyElement = new Element("dependency", xmlns);
            dependencyElement.addContent(new Element("groupId", xmlns).setText(groupId));
            dependencyElement.addContent(new Element("artifactId", xmlns).setText(artifactId));
            if (version != null) {
                dependencyElement.addContent(new Element("version", xmlns).setText(version));
            }
            if (scope != null) {
                dependencyElement.addContent(new Element("scope", xmlns).setText(scope));
            }
            dependenciesElement.addContent(dependencyElement);
        }

        // Spring Boot Starter Test
        Element testDependencyElement = new Element("dependency", xmlns);
        testDependencyElement.addContent(new Element("groupId", xmlns).setText("org.springframework.boot"));
        testDependencyElement.addContent(new Element("artifactId", xmlns).setText("spring-boot-starter-test"));
        testDependencyElement.addContent(new Element("scope", xmlns).setText("test"));
        Element exclusionsElement = new Element("exclusions", xmlns);
        testDependencyElement.addContent(exclusionsElement);
        Element exclusionElement = new Element("exclusion", xmlns);
        exclusionsElement.addContent(exclusionElement);
        exclusionElement.addContent(new Element("groupId", xmlns).setText("org.junit.vintage"));
        exclusionElement.addContent(new Element("artifactId", xmlns).setText("junit-vintage-engine"));
        dependenciesElement.addContent(testDependencyElement);

        // <build></build>
        Element buildElement = new Element("build", xmlns);
        rootElement.addContent(buildElement);
        Element pluginsElement = new Element("plugins", xmlns);
        buildElement.addContent(pluginsElement);
        Element pluginElement = new Element("plugin", xmlns);
        pluginsElement.addContent(pluginElement);
        pluginElement.addContent(new Element("groupId", xmlns).setText("org.springframework.boot"));
        pluginElement.addContent(new Element("artifactId", xmlns).setText("spring-boot-maven-plugin"));

        // Output
        Format format = Format.getPrettyFormat();
        format.setEncoding("UTF-8");
        XMLOutputter xmlOutputter = new XMLOutputter(format);
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

/*
        try {
            xmlOutputter.output(document, byteArrayOutputStream);
        } catch (IOException e) {
            Logger.error(e.getMessage());
        }
        Logger.debug(byteArrayOutputStream.toString());
        FileManager.write(path + "/pom.xml", code);
*/

        try {
            xmlOutputter.output(document, new FileOutputStream(path + "/pom.xml"));
        } catch (IOException e) {
            Logger.error("Output pom.xml failed.");
        }
        Logger.info("Output model bean file \"" + path + "/pom.xml" + "\"");
    }
}
