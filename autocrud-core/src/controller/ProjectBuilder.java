package controller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import controller.generators.*;
import model.project.*;

import java.io.*;
import java.util.Date;

public class ProjectBuilder {
    public Project project;
    private String projectUrl;
    private String sourceCodePath;

    public ProjectBuilder(String url) {
        this.projectUrl = url;

        File projectDiretory = new File(url);
        if ((!projectDiretory.exists()) || (!projectDiretory.isDirectory())) {
            Logger.error("Invalid project directory");
        }

        File projectFile = new File(url + "/autocrud-project.json");
        if (!projectFile.exists()) {
            Logger.error("Project file not found");
        }

        // Read project file
        String data = FileManager.read(url + "/autocrud-project.json");
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(Value.class, new TypeAdapter<Value>() {
                    @Override
                    public void write(JsonWriter out, Value value) throws IOException {
                        out.value(value.getData());
                    }
                    @Override
                    public Value read(JsonReader in) throws IOException {
                        try {
                            return Value.String(in.nextString());
                        } catch (NumberFormatException e) {
                            return null;
                        }
                    }
                })
                .create();


        Project project = gson.fromJson(data, Project.class);
        this.project = project;

        for (Table table: this.project.getTables()) {
            for (Column column: table.getColumns()) {
                if (column.isPrimaryKey()) {
                    table.setPrimaryKey(column.getName().getData());
                    break;
                }
            }
        }

        // Create directories
        this.sourceCodePath = url + "/src/main/java/" + (this.project.getGroupId() +
                '.' + this.project.getArtifactId()).replace('.', '/');
        FileManager.checkDirectory(sourceCodePath + "/model");
        FileManager.checkDirectory(sourceCodePath + "/mapper");
        FileManager.checkDirectory(sourceCodePath + "/controller");
        FileManager.checkDirectory(sourceCodePath + "/config");
        FileManager.checkDirectory(sourceCodePath + "/service/impl");

        FileManager.checkDirectory(url + "/src/main/resources");
    }


    @Override
    public String toString() {
        return this.project.toString();
    }


    public static String getDescription() {
        Date date = new Date();
        return "Auto-generated by TTmek AutoCRUD at " + date;
    }


    public void build() {
        new ModelGenerator(this.project, sourceCodePath + "/model");
        new MapperGenerator(this.project, sourceCodePath + "/mapper");
        new SqlQueryGenerator(this.project, this.projectUrl);
        new ControllerGenerator(this.project, sourceCodePath + "/controller");
        new PomGenerator(this.project, this.projectUrl);
        new ApplicationEntryGenerator(this.project, this.sourceCodePath);
        new ApplicationPropertiesGenerator(this.project, this.projectUrl + "/src/main/resources");
    }
}
