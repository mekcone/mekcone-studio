package com.mekcone.autocrud.core.controller.generators.backend;

import com.mekcone.autocrud.core.controller.Logger;
import com.mekcone.autocrud.core.model.enums.AccessModifier;
import com.mekcone.autocrud.core.model.enums.BasicDataType;
import com.mekcone.autocrud.core.model.java.Bean;
import com.mekcone.autocrud.core.model.java.SourceCodeFile;
import com.mekcone.autocrud.core.model.java.Variable;
import com.mekcone.autocrud.core.model.java.annotations.Annotation;
import com.mekcone.autocrud.core.model.java.annotations.KeyValueAnnotation;
import com.mekcone.autocrud.core.model.java.annotations.ParentAnnotation;
import com.mekcone.autocrud.core.model.java.annotations.SingleValueAnnotation;
import com.mekcone.autocrud.core.model.java.methods.Method;
import com.mekcone.autocrud.core.model.project.Column;
import com.mekcone.autocrud.core.model.project.Project;
import com.mekcone.autocrud.core.model.project.Table;
import com.mekcone.autocrud.core.model.project.Value;
import com.mekcone.autocrud.core.controller.FileManager;

import java.util.Date;

public class MapperGenerator {
    private Project project;
    private String path;

    public MapperGenerator(Project project, String path) {
        this.project = project;
        this.path = path;

        for (Table table: project.getTables()) {
            if (table.getPrimaryKey() == null || table.getPrimaryKey().getData().isEmpty()) {
                Logger.error("Mapper interface cannot be generated from a table without a primary key");
            }
            SourceCodeFile sourceCodeFile = new SourceCodeFile();
            sourceCodeFile.description = "Auto-generated by TTmek AutoCRUD at " + new Date();
            sourceCodeFile.packageName = project.getGroupId() + "." + project.getArtifactId().getData() + ".mapper";
            sourceCodeFile.importedItems.add("org.apache.ibatis.annotations.*");
            sourceCodeFile.importedItems.add("org.springframework.stereotype.Service");
            sourceCodeFile.importedItems.add("java.util.List");
            sourceCodeFile.importedItems.add(project.getGroupId() + "." + project.getArtifactId().getData() + ".model." + table.getName().capitalizedCamelStyle());
            //Bean mapperBean = new Bean();
            Annotation annotation = new Annotation();
            annotation.setName("Service");
            Bean mapperBean = new Bean();
            mapperBean.addAnnotation(annotation);
            mapperBean.setAccessModifier(AccessModifier.PUBLIC);
            mapperBean.setInterface(true);
            mapperBean.setName(table.getName().capitalizedCamelStyle() + "Mapper");

            this.generateCreateMethod(table, mapperBean);
            this.generateRetrieveMethod(table, mapperBean);
            this.generateRetrieveAllMethod(table, mapperBean);
            this.generateUpdateMethod(table, mapperBean);
            this.generateDeleteMethod(table, mapperBean);

            sourceCodeFile.bean = mapperBean;
            String mapperPath = path + "/" + table.getName().capitalizedCamelStyle() + "Mapper.java";
            FileManager.write(mapperPath, sourceCodeFile.toString());
            Logger.info("Output Mybatis mapper file \"" + mapperPath + "\"");
        }
    }

    public void generateCreateMethod(Table table, Bean mapperBean) {
        // Add CREATE method
        Method method = new Method();
        SingleValueAnnotation singleValueAnnotation = new SingleValueAnnotation();
        singleValueAnnotation.setName("Insert");
        String value = "";
        value = "INSERT INTO " + table.getName().getData() + "(";
        for (int i = 0; i < table.getColumns().size(); i ++) {
            if (!table.getColumns().get(i).isPrimaryKey()) {
                value += table.getColumns().get(i).getName().getData();
                if (i + 1 != table.getColumns().size()) {
                    value += ", ";
                } else {
                    value += ") ";
                }
            }
        }
        value += "VALUES(";

        for (int i = 0; i < table.getColumns().size(); i ++) {
            if (!table.getColumns().get(i).isPrimaryKey()) {
                value += "#{" + table.getColumns().get(i).getName().camelStyle() + "}";
                if (i + 1 != table.getColumns().size()) {
                    value += ", ";
                } else {
                    value += ")";
                }
            }
        }

        singleValueAnnotation.setValue(value);
        KeyValueAnnotation keyValueAnnotation = new KeyValueAnnotation();
        keyValueAnnotation.setName("Options");
        keyValueAnnotation.addKeyValue("useGeneratedKeys", Value.Boolean(true));
        keyValueAnnotation.addKeyValue("keyProperty", table.getPrimaryKey().camelStyle());
        keyValueAnnotation.addKeyValue("keyColumn", table.getPrimaryKey().getData());
        method.addAnnotation(singleValueAnnotation);
        method.addAnnotation(keyValueAnnotation);
        method.setReturnType(BasicDataType.VOID.toString());
        method.setName("create");
        Variable variable = new Variable();
        variable.setType(table.getName().capitalizedCamelStyle());
        variable.setName(table.getName().camelStyle());
        method.addParam(variable);
        method.setHasBody(false);
        mapperBean.addMethod(method);
    }

    public void generateRetrieveMethod(Table table, Bean mapperBean) {
        Method method = new Method();
        SingleValueAnnotation singleValueAnnotation = new SingleValueAnnotation();
        singleValueAnnotation.setName("Select");
        singleValueAnnotation.setValue("SELECT * FROM " + table.getName().getData() + " WHERE " + table.getPrimaryKey().getData() + " = #{" + table.getPrimaryKey().camelStyle() +"}");
        method.addAnnotation(singleValueAnnotation);

        ParentAnnotation parentAnnotation = new ParentAnnotation();
        parentAnnotation.setName("Results");
        for (Column column: table.getColumns()) {
            KeyValueAnnotation keyValueAnnotation = new KeyValueAnnotation();
            keyValueAnnotation.setName("Result");
            keyValueAnnotation.addKeyValue("property", column.getName().camelStyle());
            keyValueAnnotation.addKeyValue("column", column.getName().getData());
            parentAnnotation.addAnnatation(keyValueAnnotation);
        }
        method.addAnnotation(parentAnnotation);

        method.setReturnType("List<" + table.getName().capitalizedCamelStyle() + ">");
        method.setName("retrieve");
        Variable variable = new Variable();
        variable.setType(BasicDataType.STRING);
        variable.setName(table.getPrimaryKey().camelStyle());
        method.addParam(variable);
        method.setHasBody(false);
        mapperBean.addMethod(method);
    }

    public void generateRetrieveAllMethod(Table table, Bean mapperBean) {
        Method method = new Method();
        SingleValueAnnotation singleValueAnnotation = new SingleValueAnnotation();
        singleValueAnnotation.setName("Select");
        singleValueAnnotation.setValue("SELECT * FROM " + table.getName().getData());
        method.addAnnotation(singleValueAnnotation);

        ParentAnnotation parentAnnotation = new ParentAnnotation();
        parentAnnotation.setName("Results");
        for (Column column: table.getColumns()) {
            KeyValueAnnotation keyValueAnnotation = new KeyValueAnnotation();
            keyValueAnnotation.setName("Result");
            keyValueAnnotation.addKeyValue("property", column.getName().camelStyle());
            keyValueAnnotation.addKeyValue("column", column.getName().getData());
            parentAnnotation.addAnnatation(keyValueAnnotation);
        }
        method.addAnnotation(parentAnnotation);

        method.setReturnType("List<" + table.getName().capitalizedCamelStyle() + ">");
        method.setName("retrieveAll");
        // Variable variable = new Variable();
        // variable.setType(BasicDataType.STRING);
        // variable.setName(table.getPrimaryKey().camelStyle());
        // method.addParam(variable);
        method.setHasBody(false);
        mapperBean.addMethod(method);
    }

    public void generateUpdateMethod(Table table, Bean mapperBean) {
        Method method = new Method();
        SingleValueAnnotation singleValueAnnotation = new SingleValueAnnotation();
        singleValueAnnotation.setName("Update");
        String value = "UPDATE " + table.getName().getData() + " SET ";
        for (int i = 0; i < table.getColumns().size(); i ++) {
            if (table.getColumns().get(i).isPrimaryKey()) {
                continue;
            }
            Value name = table.getColumns().get(i).getName();
            value += name.getData() + " = #{" + name.camelStyle() + "}";
            if (i + 1 != table.getColumns().size()) {
                value += ", ";
            }
        }
        value += " WHERE " + table.getPrimaryKey().getData() + " = #{" + table.getPrimaryKey().camelStyle() + "}";
        singleValueAnnotation.setValue(value);
        method.addAnnotation(singleValueAnnotation);
        method.setReturnType(BasicDataType.VOID.toString());
        method.setName("update");
        Variable updateMethodVariable = new Variable();
        updateMethodVariable.setType(table.getName().capitalizedCamelStyle());
        updateMethodVariable.setName(table.getName().camelStyle());
        method.addParam(updateMethodVariable);
        method.setHasBody(false);
        mapperBean.addMethod(method);
    }

    public void generateDeleteMethod(Table table, Bean mapperBean) {
        Method method = new Method();

        SingleValueAnnotation singleValueAnnotation = new SingleValueAnnotation();
        singleValueAnnotation.setName("Delete");
        singleValueAnnotation.setValue("DELETE FROM " + table.getName().getData() + " WHERE " + table.getPrimaryKey().getData() + " = #{" + table.getPrimaryKey().camelStyle() +"}");
        method.addAnnotation(singleValueAnnotation);

        method.setReturnType(BasicDataType.VOID.toString());
        method.setName("delete");
        Variable deleteMethodVariable = new Variable();
        deleteMethodVariable.setType(BasicDataType.STRING);
        deleteMethodVariable.setName(table.getPrimaryKey().camelStyle());
        method.addParam(deleteMethodVariable);
        method.setHasBody(false);
        mapperBean.addMethod(method);
    }
}
